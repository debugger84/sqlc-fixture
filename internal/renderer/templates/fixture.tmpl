{{define "fixture.tmpl"}}
    {{- /*gotype:github.com/debugger84/sqlc-fixture/internal/renderer.FixtureTplData*/ -}}
    // Code generated by sqlc-fixture plugin for SQLc. DO NOT EDIT.

    package {{.Package}}

    import (
    {{ range .Imports -}}
        {{ .Format }}
    {{ end -}}
    )

    type {{ .Struct.Type.TypeName }}Fixture struct {
        entity {{ .Struct.Type.TypeWithPackage }}
        db {{if ne .Struct.Type.PackageName "" }}{{ .Struct.Type.PackageName}}.DBTX{{ else }}DBTX{{ end }}
    }

    func New{{ .Struct.Type.TypeName }}Fixture(db {{if ne .Struct.Type.PackageName "" }}{{ .Struct.Type.PackageName}}.DBTX{{ else }}DBTX{{ end }}, defaultEntity {{ .Struct.Type.TypeWithPackage }}) *{{ .Struct.Type.TypeName }}Fixture {
        return &{{ .Struct.Type.TypeName }}Fixture{
            db: db,
            entity: defaultEntity,
        }
    }

    {{- range .Struct.Fields }}

    func (f *{{ $.Struct.Type.TypeName }}Fixture) {{.Name}}({{ lowerTitle .Name }} {{.Type.TypeWithPackage}}) *{{ $.Struct.Type.TypeName }}Fixture {
        c := f.clone()
        c.entity.{{.Name}} = {{ lowerTitle .Name }}
        return c
    }
    {{- end }}

    func (f *{{ .Struct.Type.TypeName }}Fixture) clone() *{{ .Struct.Type.TypeName }}Fixture {
        return &{{ .Struct.Type.TypeName }}Fixture{
            db: f.db,
            entity: f.entity,
        }
    }


    func (f *{{ .Struct.Type.TypeName }}Fixture) save(ctx context.Context) error {
        query := `INSERT INTO {{ .Struct.FullTableName }}
            ({{ $.Helper.ColumnNames }})
            VALUES ({{ $.Helper.ColumnPlaceholders }})
            RETURNING {{ $.Helper.ColumnNames }}
        `
        row := f.db.QueryRow(ctx, query,
    {{ range .Struct.Fields -}}
        f.entity.{{.Name}},
    {{ end}}
        )
        err := row.Scan(
{{ range .Struct.Fields -}}
        &f.entity.{{ .Name }},
{{ end}}
        )
        return err
    }

    func (f *{{ .Struct.Type.TypeName }}Fixture) GetEntity() {{ .Struct.Type.TypeWithPackage }} {
        return f.entity
    }

    func (f *{{ .Struct.Type.TypeName }}Fixture) Create(tb testing.TB) *{{ $.Struct.Type.TypeName }}Fixture {
        err := f.save(context.Background())
        if err != nil {
            tb.Fatalf("failed to create {{ .Struct.Type.TypeName }}: %v", err)
        }
        f.Cleanup(tb)
        c := f.clone()
        return c
    }

    func (f *{{ .Struct.Type.TypeName }}Fixture) Cleanup(tb testing.TB) {
        tb.Cleanup(
        func() {
            {{- $addPrimary := false -}}
            {{- range .Struct.Fields -}}
                {{ if .IsPrimaryKey }}
                    {{- $addPrimary = true }}
                    query := `DELETE FROM {{ $.Struct.FullTableName }} WHERE {{ .DBName }} = $1`
                    _, err := f.db.Exec(context.Background(), query, f.entity.{{ .Name }})
                {{ end }}
            {{end}}
    {{ if not $addPrimary }}
        query := `DELETE FROM {{ .Struct.FullTableName }}`
            _, err := f.db.Exec(context.Background(), query)
    {{end}}
            if err != nil {
                tb.Fatalf("failed to cleanup {{ .Struct.Type.TypeName }}: %v", err)
            }
        })
    }

    {{ if .Struct.HasPrimaryKey}}
    func (f *{{ .Struct.Type.TypeName }}Fixture) PullUpdates(tb testing.TB) *{{ $.Struct.Type.TypeName }}Fixture {
        c := f.clone()
        {{- range .Struct.Fields -}}
            {{ if .IsPrimaryKey }}
                {{- $addPrimary = true }}
                ctx := context.Background()
                query := `SELECT * FROM {{ $.Struct.FullTableName }} WHERE {{ .DBName }} = $1`
                row := f.db.QueryRow(ctx, query,
                    c.entity.{{ .Name }},
                )
            {{ end }}
        {{end}}
        err := row.Scan(
        {{ range .Struct.Fields -}}
            &c.entity.{{ .Name }},
        {{ end}}
        )
        if err != nil {
            tb.Fatalf("failed to actualize data {{ .Struct.Type.TypeName }}: %v", err)
        }
        return c
    }
    {{end}}
{{end}}
